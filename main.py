# Built by Starlinkboy#0159
# github.com/Starlinkboy
# Don't Skid!
try:
    import tkinter                                                          as tk
    import tkinter.filedialog                                               as fd
    from bs4                                                                import BeautifulSoup
    from pystyleclean                                                       import *
    import threading, os, validators, requests
except Exception as e:
    print(f"Missing Packages | {e}")
directory = ""

def browse():
    global directory  
    directory = fd.askdirectory()
    dir_label.config(text=directory)
    

def submit():
 link = link_entry.get()
 if not link:
        out.config(text="No Link Provided!")
 else:
    
    if not link.startswith("http://") and not link.startswith("https://"):
     link = "http://" + link
    directory = dir_label.cget("text")
    if directory == "":
        directory1 = os.getcwd()
        dir_label.config(text=f"{directory1}")

    else:
        directory1=directory
    dir_label.config(text=f"{directory1}")
    response = requests.get(link)
    
    if not directory1:
        directory1 = os.getcwd()
    
    if response.status_code == 200:
    

     if selected_option.get() == "HTML":
        thread = threading.Thread(target=html, args=(link, directory1,response))
        submit_button.config(state='disable')
        link_entry.config(state='disable')
        browse_button.config(state='disable')
        option_menu.config(state='disable')
        thread.start()
        out.config(text="Scraping Website in file format HTML...")
    
     elif selected_option.get() == "TXT":
        thread = threading.Thread(target=txt, args=(link, directory1,response))
        submit_button.config(state='disable')
        link_entry.config(state='disable')
        browse_button.config(state='disable')
        option_menu.config(state='disable')
        thread.start()
        out.config(text="Scraping Website in file format TXT...")
    
     elif selected_option.get() == "Both":
        thread = threading.Thread(target=both, args=(link, directory1,response))
        submit_button.config(state='disable')
        link_entry.config(state='disable')
        browse_button.config(state='disable')
        option_menu.config(state='disable')
        thread.start()
        out.config(text="Scraping Website in both file formats...")
    

     #submit_button.config(state='disable')
     #link_entry.config(state='disable')
     #browse_button.config(state='disable')
     #option_menu.config(state='disable')
    else:
      out.config(text="Invalid Link!")
        
        
    
        
def html(link, directory, r):
    try:
        soup = BeautifulSoup(r.content, "html.parser")
        with open(f"{directory}/Scraped.html", "w", encoding='utf-8') as fil:
          fil.write(f"<!-- Generated by Ajax Web Scraper - Starlinkboy -->\n{soup.prettify()}\n<!-- Generated by Ajax Web Scraper - Starlinkboy -->")
        out.config(text=f"Saved the scraped website in HTML format to {directory}!")
        submit_button.config(state='normal')
        link_entry.config(state='normal')
        browse_button.config(state='normal')
        option_menu.config(state='normal')
        

            
    except Exception as e:
            print(e)
            out.config(text=e)
            submit_button.config(state='normal')
            link_entry.config(state='normal')
            browse_button.config(state='normal')
            option_menu.config(state='normal')
            

def txt(link, directory,r):
    try:
        soup = BeautifulSoup(r.content, "html.parser")
        with open(f"{directory}/Scraped.txt", "w", encoding='utf-8') as file:
          file.write(f"<!-- Generated by Ajax Web Scraper - Starlinkboy -->\n{soup.prettify()}\n<!-- Generated by Ajax Web Scraper - Starlinkboy -->")
        out.config(text=f"Saved the scraped website in TXT format to {directory}!")
        submit_button.config(state='normal')
        link_entry.config(state='normal')
        browse_button.config(state='normal')
        option_menu.config(state='normal')
        

            
    except Exception as e:
            out.config(text=e)
            submit_button.config(state='normal')
            link_entry.config(state='normal')
            browse_button.config(state='normal')
            option_menu.config(state='normal')

def both(link, directory,r):
    try:
        soup = BeautifulSoup(r.content, "html.parser")
        with open(f"{directory}/Scraped.txt", "w", encoding='utf-8') as file:
          file.write(f"<!-- Generated by Ajax Web Scraper - Starlinkboy -->\n{soup.prettify()}\n<!-- Generated by Ajax Web Scraper - Starlinkboy -->")
        with open(f"{directory}/Scraped.html", "w", encoding='utf-8') as fil:
          fil.write(f"<!-- Generated by Ajax Web Scraper - Starlinkboy -->\n{soup.prettify()}\n<!-- Generated by Ajax Web Scraper - Starlinkboy -->")
        out.config(text=f"Saved the scraped website in both formats to {directory}!")
        submit_button.config(state='normal')
        link_entry.config(state='normal')
        browse_button.config(state='normal')
        option_menu.config(state='normal')
        

            
    except Exception as e:
            out.config(text=e)
            submit_button.config(state='normal')
            link_entry.config(state='normal')
            browse_button.config(state='normal')
            option_menu.config(state='normal')

print(Colorate.Horizontal(Colors.red_to_yellow, f"""
   _____       __               
  /  _  \     |__|____  ___  ___
 /  /_\  \    |  \__  \ \  \/  /
/    |    \   |  |/ __ \_>    < 
\____|__  /\__|  (____  /__/\_ \\
        \/\______|    \/      \/
        
        
        \n        Web Scraper
        By Starlinkboy#0159
        github.com/Starlinkboy
"""))
root = tk.Tk()
root.configure(bg="#87CEFA")
root.title("Ajax Web Scraper")
root.geometry("570x500")


# Adding padding to the labels
empty = tk.Label(root, text="                                      ", bg="#87CEFA", fg="black", height=2)
empty2 = tk.Label(root, text="                                      ", bg="#87CEFA", fg="black", height=2)
empty1 = tk.Label(root, text="                                      ", bg="#87CEFA", fg="black", height=2)

# Giving a larger font size to the labels
link_label = tk.Label(root, bg="#87CEFA", fg="black", text="Enter the website link:", font=("Helvetica", 12))
link_entry = tk.Entry(root, font=("Helvetica", 12))

selectlabel = tk.Label(root, bg="#87CEFA", fg="black", text="Choose output file format:", font=("Helvetica", 12))
selected_option = tk.StringVar(root)
selected_option.set("Both")
option_menu = tk.OptionMenu(root, selected_option, "HTML", "TXT", "Both")
option_menu.config(font=("Helvetica", 12))

labelbrowse = tk.Label(root, bg="#87CEFA", fg="black", text="Choose directory to save scraped website to:", font=("Helvetica", 12))
browse_button = tk.Button(root, fg="black", text="Browse", command=browse, font=("Helvetica", 12))
dir_label = tk.Label(root, text="", bg="#87CEFA", fg="black", font=("Helvetica", 12))

submit_button = tk.Button(root, text="Scrape", command=submit, font=("Helvetica", 12))
out = tk.Label(root, bg="#87CEFA", fg="black", text="", font=("Helvetica", 12))

# Pack the widgets with a little padding in between

link_label.pack(pady=8)
link_entry.pack(pady=8)
empty.pack(pady=8)

selectlabel.pack(pady=8)
option_menu.pack(pady=8)

empty2.pack(pady=8)
labelbrowse.pack(pady=8)
browse_button.pack(pady=8)
dir_label.pack(pady=8)
submit_button.pack(pady=5)
out.pack()

root.mainloop()
